// File name: projects/05/CPU.hdl

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    And(a=instruction[15], b=instruction[3], out=writeM);
    Not(in=instruction[15], out=aIns);
    Mux16(a=instruction, b=dRegPrc, sel=instruction[15], out=aNext);
    Or(a=aIns, b=instruction[5], out=aLoad);
    ARegister(in=aNext, load=aLoad, out=aReg, out[0..14]=addressM);
    And(a=instruction[4], b=instruction[15], out=dLoad);
    DRegister(in=dRegPrc, load=dLoad, out=dReg);
    Mux16(a=aReg, b=inM, sel=instruction[12], out=am);
    ALU(x=dReg, y=am, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=dRegPrc, out=outM, zr=zr, ng=ng);
    Not(in=zr, out=nzr);
    Not(in=ng, out=nng);
    And(a=nzr, b=nng, out=pos);
    And(a=instruction[2], b=ng, out=jlt);
    And(a=instruction[1], b=zr, out=jz);
    And(a=instruction[0], b=pos, out=jpos);
    Or(a=jlt, b=jz, out=jltz);
    Or(a=jltz, b=jpos, out=jump0);
    And(a=instruction[15], b=jump0, out=jump);
    PC(in=aReg, load=jump, inc=true, reset=reset, out[0..14]=pc);
}