// File name: projects/03/a/Bit.hdl

/**
 * 1-bit register:
 * If load[t] == 1 then out[t+1] = in[t]
 *                 else out does not change (out[t+1] = out[t])
 */

CHIP Bit {
    IN in, load;
    OUT out;

    PARTS:
    DFF(in=w1,out=o1,out=out);
    Mux(a=o1,b=in,sel=load,out=w1);
}
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
	 Mux16(a=o4,b=o5,sel=inc,out=o1); // to inc or not to (inc)
	 Mux16(a=o1,b=in,sel=load,out=o2); // output in? (load)
	 Mux16(a=o2,b=false,sel=reset,out=o3); // null ? (reset)
	 Register(in=o3,load=true,out=out,out=o4); // stop the cycles
	 Inc16(in=o4,out=o5); // Increment last output
}
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    DMux8Way(in=load,sel=address[0..2],a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h);
    RAM8(in=in,load=a,address=address[3..5],out=o0);
    RAM8(in=in,load=b,address=address[3..5],out=o1);
    RAM8(in=in,load=c,address=address[3..5],out=o2);
    RAM8(in=in,load=d,address=address[3..5],out=o3);
    RAM8(in=in,load=e,address=address[3..5],out=o4);
    RAM8(in=in,load=f,address=address[3..5],out=o5);
    RAM8(in=in,load=g,address=address[3..5],out=o6);
    RAM8(in=in,load=h,address=address[3..5],out=o7);
    Mux8Way16(a=o0,b=o1,c=o2,d=o3,e=o4,f=o5,g=o6,h=o7,sel=address[0..2],out=out);
}
// File name: projects/03/a/RAM8.hdl

/**
 * Memory of 8 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM8 {
    IN in[16], load, address[3];
    OUT out[16];

    PARTS:
    DMux8Way(in=load,sel=address,a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h);
    Register(in=in,load=a,out=o0);
    Register(in=in,load=b,out=o1);
    Register(in=in,load=c,out=o2);
    Register(in=in,load=d,out=o3);
    Register(in=in,load=e,out=o4);
    Register(in=in,load=f,out=o5);
    Register(in=in,load=g,out=o6);
    Register(in=in,load=h,out=o7);
    Mux8Way16(a=o0,b=o1,c=o2,d=o3,e=o4,f=o5,g=o6,h=o7,sel=address,out=out);
}
// File name: projects/03/a/Register.hdl

/**
 * 16-bit register:
 * If load[t] == 1 then out[t+1] = in[t]
 * else out does not change
 */

CHIP Register {
    IN in[16], load;
    OUT out[16];

    PARTS:
    Bit(in=in[0],load=load,out=out[0]);
    Bit(in=in[1],load=load,out=out[1]);
    Bit(in=in[2],load=load,out=out[2]);
    Bit(in=in[3],load=load,out=out[3]);
    Bit(in=in[4],load=load,out=out[4]);
    Bit(in=in[5],load=load,out=out[5]);
    Bit(in=in[6],load=load,out=out[6]);
    Bit(in=in[7],load=load,out=out[7]);
    Bit(in=in[8],load=load,out=out[8]);
    Bit(in=in[9],load=load,out=out[9]);
    Bit(in=in[10],load=load,out=out[10]);
    Bit(in=in[11],load=load,out=out[11]);
    Bit(in=in[12],load=load,out=out[12]);
    Bit(in=in[13],load=load,out=out[13]);
    Bit(in=in[14],load=load,out=out[14]);
    Bit(in=in[15],load=load,out=out[15]);
}
// File name: projects/03/b/RAM16K.hdl

/**
 * Memory of 16K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM16K {
    IN in[16], load, address[14];
    OUT out[16];

    PARTS:
    DMux8Way(in=load,sel=address[0..2],a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h);
    RAM4K(in=in,load=a,address[0..10]=address[3..13],address[11]=false,out=o0);
    RAM4K(in=in,load=b,address[0..10]=address[3..13],address[11]=false,out=o1);
    RAM4K(in=in,load=c,address[0..10]=address[3..13],address[11]=false,out=o2);
    RAM4K(in=in,load=d,address[0..10]=address[3..13],address[11]=false,out=o3);
    RAM4K(in=in,load=e,address[0..10]=address[3..13],address[11]=false,out=o4);
    RAM4K(in=in,load=f,address[0..10]=address[3..13],address[11]=false,out=o5);
    RAM4K(in=in,load=g,address[0..10]=address[3..13],address[11]=false,out=o6);
    RAM4K(in=in,load=h,address[0..10]=address[3..13],address[11]=false,out=o7);
    Mux8Way16(a=o0,b=o1,c=o2,d=o3,e=o4,f=o5,g=o6,h=o7,sel=address[0..2],out=out);
}
// File name: projects/03/b/RAM4K.hdl

/**
 * Memory of 4K registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM4K {
    IN in[16], load, address[12];
    OUT out[16];

    PARTS:
    DMux8Way(in=load,sel=address[0..2],a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h);
    RAM512(in=in,load=a,address=address[3..11],out=o0);
    RAM512(in=in,load=b,address=address[3..11],out=o1);
    RAM512(in=in,load=c,address=address[3..11],out=o2);
    RAM512(in=in,load=d,address=address[3..11],out=o3);
    RAM512(in=in,load=e,address=address[3..11],out=o4);
    RAM512(in=in,load=f,address=address[3..11],out=o5);
    RAM512(in=in,load=g,address=address[3..11],out=o6);
    RAM512(in=in,load=h,address=address[3..11],out=o7);
    Mux8Way16(a=o0,b=o1,c=o2,d=o3,e=o4,f=o5,g=o6,h=o7,sel=address[0..2],out=out);
}
// File name: projects/03/b/RAM512.hdl

/**
 * Memory of 512 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM512 {
    IN in[16], load, address[9];
    OUT out[16];

    PARTS:
    DMux8Way(in=load,sel=address[0..2],a=a,b=b,c=c,d=d,e=e,f=f,g=g,h=h);
    RAM64(in=in,load=a,address=address[3..8],out=o0);
    RAM64(in=in,load=b,address=address[3..8],out=o1);
    RAM64(in=in,load=c,address=address[3..8],out=o2);
    RAM64(in=in,load=d,address=address[3..8],out=o3);
    RAM64(in=in,load=e,address=address[3..8],out=o4);
    RAM64(in=in,load=f,address=address[3..8],out=o5);
    RAM64(in=in,load=g,address=address[3..8],out=o6);
    RAM64(in=in,load=h,address=address[3..8],out=o7);
    Mux8Way16(a=o0,b=o1,c=o2,d=o3,e=o4,f=o5,g=o6,h=o7,sel=address[0..2],out=out);
}